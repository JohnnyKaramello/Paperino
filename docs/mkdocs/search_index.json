{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nWelcome to the Paperino docs!\n\n\nThis is the place to get started with your new hardware! ;-) We have divided the documentation into the following sections:\n\n\n\n\nHookup guide\n: Step-by-step instructions to get your Paperino setup and run within minutes.\n\n\nReference\n: More infos around the ePaper and the accelerometer (data sheets\u2026).\n\n\nExamples\n: Ready to use examples for your own inspiration.\n\n\n\n\nSo, what is Paperino?\n\n\nPaperino is an easy to use micro EPD breakout-board for the Photon or other Arduino-compatible microcontrollers. The eInk-based ePaper display mimics the appearance of natural paper and is capable of holding text and images indefinitely, even without electricity. This makes Paperino perfect for your next battery-driven, connected project where the display content does not changes very often.\n\n\nPaperino also integrates an easy to use accelerometer. It extends the EPD by tap-sensing functions and offers portrait/landscape detection. Furthermore you can wake-up your MCU after movement-based events from deep-sleeping, saving battery live during waiting phases.", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "Welcome to the Paperino docs!  This is the place to get started with your new hardware! ;-) We have divided the documentation into the following sections:   Hookup guide : Step-by-step instructions to get your Paperino setup and run within minutes.  Reference : More infos around the ePaper and the accelerometer (data sheets\u2026).  Examples : Ready to use examples for your own inspiration.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#so-what-is-paperino", 
            "text": "Paperino is an easy to use micro EPD breakout-board for the Photon or other Arduino-compatible microcontrollers. The eInk-based ePaper display mimics the appearance of natural paper and is capable of holding text and images indefinitely, even without electricity. This makes Paperino perfect for your next battery-driven, connected project where the display content does not changes very often.  Paperino also integrates an easy to use accelerometer. It extends the EPD by tap-sensing functions and offers portrait/landscape detection. Furthermore you can wake-up your MCU after movement-based events from deep-sleeping, saving battery live during waiting phases.", 
            "title": "So, what is Paperino?"
        }, 
        {
            "location": "/hookupEPD/", 
            "text": "The ePaper hookup guide\n\n\nIn this tutorial we\u2019ll give you a brief introduction to the Paperino ePaper display and the breakout board, then we\u2019ll jump into example hardware hookups and code. The tutorial is split into the following sections:\n\n\nBreakout Board\n \u2013 To begin, we\u2019ll go over each of the pins on the breakout board and their function. \n\n\nHardware hookup\n \u2013 In this section we\u2019ll show you how to hook an Arduino up to the display via SPI.\n\n\nUsing the Adafruit Library\n \u2013 A quick examination of the Micro ePaper family of function calls.\n\n\nFirst Example: Hello World!\n \u2013 The first complete example\u2026 let\u2019s make the display blink!\n\n\nBeside the ePaper breakout board, you\u2019ll need something to control the display. Optimally you\u2019ll want something that has a 3.3V operating voltage. We\u2019ll be using a Particle Photon as an example, which generates and exposes 3V3 on one of the pins.\n\n\nePaper display\n\n\nThe ePaper display from Plastic Logic is an eInk-based EPD with 148x70 pixel resolution. It keeps its image content stable without any power, so its perfect for your connected, ultra-low power project. \n\n\n\n\nIt is super thin and weights just 1.2g!! Actually it\u2019s even bendable, so start thinking of your curved product of the future just now!\n\n\nBreakout Board\n\n\nThe breakout board is the physical interface between the ePaper display and your MCU. It contains a small circuitry to generate the voltages which are needed to switch an ePaper screen. Furthermore it integrates an accelerometer (BMA250) which allows to add further functionality (like tap detection, portrait/landscape detection, \u2026)\n\n\n\n\nThe breakout board provides access to 12 pins. To start with, you\u2019ll only need the first nine pins to make the display work and two further pin to activate the integrated accelerometer. The following table provides an overview of the used pins:\n\n\n\n\n\n\n\n\n#\n\n\nPin\n\n\nFunction\n\n\nPhoton (example)\n\n\n\n\n\n\n\n\n\n\n1\n\n\nMOS\n\n\nSPI MOSI\n\n\nD2\n\n\n\n\n\n\n2\n\n\nMIS\n\n\nSPI MISO\n\n\nD3\n\n\n\n\n\n\n3\n\n\nCLK\n\n\nSPI clock\n\n\nD4\n\n\n\n\n\n\n4\n\n\nCS1\n\n\nSPI chip select for ePaper driver IC\n\n\nD5 or any other free pin\n\n\n\n\n\n\n5\n\n\nRST\n\n\nDigital pin to reset driver IC UC8156\n\n\nA0 or any other free pin\n\n\n\n\n\n\n6\n\n\nBSY\n\n\nDigital pin to sense activity state of driver IC UC8156\n\n\nA1 or any other free pin\n\n\n\n\n\n\n7\n\n\n3V3\n\n\nRegulated 3.3V power supply\n\n\n3V3\n\n\n\n\n\n\n8\n\n\nGND\n\n\nGround\n\n\nGND\n\n\n\n\n\n\n9\n\n\n-\n\n\n(unused)\n\n\n(unused)\n\n\n\n\n\n\n10\n\n\nCS2\n\n\nSPI chip select for accelerometer IC\n\n\nD0 or any other free pin\n\n\n\n\n\n\n11\n\n\nIN2\n\n\nInterrupt line #2, e.g. for tap sensing\n\n\nA7 or any other free pin\n\n\n\n\n\n\n12\n\n\nIN1\n\n\nInterrupt line #1, e.g. for wake-up of deep sleeping MCU\n\n\nA7\n\n\n\n\n\n\n\n\nYou can wire-up the two remaining pins called IN1 and IN2 later-on. They are required if you want to wake-up your MCU from deep-sleeping, if for example an motion is detected and/or for sensing finger taps on the screen.\n\n\nHardware hookup\n\n\nNow it\u2019s time to wire it up! In this section we\u2019ll go over the hookup, based on an Particle Photon. We\u2019ll be using Particle\u2019s hardware SPI pins in order to achieve the fastest data transfer speed. That means we\u2019ll need to use pins for SPI connection as described in the table above. The other pins \u2013 RST, BSY, CS1/CS2 and IN1/IN2 \u2013 can be connected to any available digital pin on the Photon.\n\n\nHere\u2019s the example hookup:\n\n\n\n\nUsing the Adafruit GFX Library\n\n\nNow that we have wired-up the Paperino breakout board with the MCU, it\u2019s time to get started writing your own application! Before you get started, here\u2019s a quick overview of the \nPL_microEPD\n library.\n\n\nAt the top of your code, you\u2019ll need to include the Adafruit GFX library together with its extended fonts support library, which was made by Paul Kourany. Finally, you should add the library \nPL_microEPD\n which does the translation to the ePaper displays in the background. \n\n\n#include \"Adafruit_mfGFX.h\"\n#include \"fonts.h\"\n#include \"PL_microEPD.h\"\n\n\n\nAfter you have included the library, you can create an object \ndisplay\n in the global variable area of your code. Now its also time to define the pin mapping:\n\n\n#define EPD_RST     A0      //Reset pin, used to restart the driver IC\n#define EPD_BUSY    A1      //Busy pin, used to sense the activity state of the driver IC\n#define EPD_CS      D5      //Chip select pin, used to select the EPD driver IC\n\nPL_microEPD display(EPD_CS, EPD_RST, EPD_BUSY);\n\n\n\nIn the example above we\u2019ve called our \nPL_MicroEPD\n object \ndisplay\n, but you can call it anything you\u2019d like. You can even create more than one, if you have more displays connected to your MCU.\n\n\nThe last step to the Paperino setup should occur in the setup() function. Stick a \ndisplay.begin()\n function in there, which will initialise the display and update all sorts of behind-the-scenes settings for you.\n\n\nsetup() {\n    display.begin();        //Configure Paperino and all of it\u2019s pins\n}\n\n\n\nFirst Example: Hello World!\n\n\nNow we are ready to let the display blink! You can use the \nprint()\n command to write your first text on the screen buffer:\n\n\ndisplay.print(\u201cHello World!\u201d);      //Writes the text \u201cHello World!\u201d into the image buffer\ndisplay.updateFull();               //Refreshing display with the content of the image buffer\n\n\n\nThe command \nupdateFull()\n actually triggers the ePaper refresh, displaying the content of the image buffer. That\u2019s it! To summarize everything, you can now see the complete code here:\n\n\n//PAPERINO: Hello World example for the Paperino Micro ePaper breakoutboard\n\n#include \"Adafruit_mfGFX.h\"\n#include \"PLD_tinyEPD.h\"\n#include \"fonts.h\"\n\n#define EPD_RST     A0\n#define EPD_BUSY    A1\n#define EPD_CS      D5\n\nPL_tinyEPD display(EPD_CS, EPD_RST, EPD_BUSY);\n\nvoid setup() {\n    SPI1.begin();\n    SPI1.setBitOrder(MSBFIRST);                 \n    SPI1.setDataMode(SPI_MODE0); \n    SPI1.setClockDivider(SPI_CLOCK_DIV4);\n    display.begin(true);\n    display.print(\u201cHello World!\u201d);\n    display.updateFull();\n}\n\nvoid loop() {\n    }\n\n\n\nThat was easy, right? If you want to proceed with the setup of the integrated accelerometer let continue here.\nIf you are interested in more powerful design options of the Adafruit class let\u2019s have a look here.", 
            "title": "Micro EPD"
        }, 
        {
            "location": "/hookupEPD/#the-epaper-hookup-guide", 
            "text": "In this tutorial we\u2019ll give you a brief introduction to the Paperino ePaper display and the breakout board, then we\u2019ll jump into example hardware hookups and code. The tutorial is split into the following sections:  Breakout Board  \u2013 To begin, we\u2019ll go over each of the pins on the breakout board and their function.   Hardware hookup  \u2013 In this section we\u2019ll show you how to hook an Arduino up to the display via SPI.  Using the Adafruit Library  \u2013 A quick examination of the Micro ePaper family of function calls.  First Example: Hello World!  \u2013 The first complete example\u2026 let\u2019s make the display blink!  Beside the ePaper breakout board, you\u2019ll need something to control the display. Optimally you\u2019ll want something that has a 3.3V operating voltage. We\u2019ll be using a Particle Photon as an example, which generates and exposes 3V3 on one of the pins.", 
            "title": "The ePaper hookup guide"
        }, 
        {
            "location": "/hookupEPD/#epaper-display", 
            "text": "The ePaper display from Plastic Logic is an eInk-based EPD with 148x70 pixel resolution. It keeps its image content stable without any power, so its perfect for your connected, ultra-low power project.    It is super thin and weights just 1.2g!! Actually it\u2019s even bendable, so start thinking of your curved product of the future just now!", 
            "title": "ePaper display"
        }, 
        {
            "location": "/hookupEPD/#breakout-board", 
            "text": "The breakout board is the physical interface between the ePaper display and your MCU. It contains a small circuitry to generate the voltages which are needed to switch an ePaper screen. Furthermore it integrates an accelerometer (BMA250) which allows to add further functionality (like tap detection, portrait/landscape detection, \u2026)   The breakout board provides access to 12 pins. To start with, you\u2019ll only need the first nine pins to make the display work and two further pin to activate the integrated accelerometer. The following table provides an overview of the used pins:     #  Pin  Function  Photon (example)      1  MOS  SPI MOSI  D2    2  MIS  SPI MISO  D3    3  CLK  SPI clock  D4    4  CS1  SPI chip select for ePaper driver IC  D5 or any other free pin    5  RST  Digital pin to reset driver IC UC8156  A0 or any other free pin    6  BSY  Digital pin to sense activity state of driver IC UC8156  A1 or any other free pin    7  3V3  Regulated 3.3V power supply  3V3    8  GND  Ground  GND    9  -  (unused)  (unused)    10  CS2  SPI chip select for accelerometer IC  D0 or any other free pin    11  IN2  Interrupt line #2, e.g. for tap sensing  A7 or any other free pin    12  IN1  Interrupt line #1, e.g. for wake-up of deep sleeping MCU  A7     You can wire-up the two remaining pins called IN1 and IN2 later-on. They are required if you want to wake-up your MCU from deep-sleeping, if for example an motion is detected and/or for sensing finger taps on the screen.", 
            "title": "Breakout Board"
        }, 
        {
            "location": "/hookupEPD/#hardware-hookup", 
            "text": "Now it\u2019s time to wire it up! In this section we\u2019ll go over the hookup, based on an Particle Photon. We\u2019ll be using Particle\u2019s hardware SPI pins in order to achieve the fastest data transfer speed. That means we\u2019ll need to use pins for SPI connection as described in the table above. The other pins \u2013 RST, BSY, CS1/CS2 and IN1/IN2 \u2013 can be connected to any available digital pin on the Photon.  Here\u2019s the example hookup:", 
            "title": "Hardware hookup"
        }, 
        {
            "location": "/hookupEPD/#using-the-adafruit-gfx-library", 
            "text": "Now that we have wired-up the Paperino breakout board with the MCU, it\u2019s time to get started writing your own application! Before you get started, here\u2019s a quick overview of the  PL_microEPD  library.  At the top of your code, you\u2019ll need to include the Adafruit GFX library together with its extended fonts support library, which was made by Paul Kourany. Finally, you should add the library  PL_microEPD  which does the translation to the ePaper displays in the background.   #include \"Adafruit_mfGFX.h\"\n#include \"fonts.h\"\n#include \"PL_microEPD.h\"  After you have included the library, you can create an object  display  in the global variable area of your code. Now its also time to define the pin mapping:  #define EPD_RST     A0      //Reset pin, used to restart the driver IC\n#define EPD_BUSY    A1      //Busy pin, used to sense the activity state of the driver IC\n#define EPD_CS      D5      //Chip select pin, used to select the EPD driver IC\n\nPL_microEPD display(EPD_CS, EPD_RST, EPD_BUSY);  In the example above we\u2019ve called our  PL_MicroEPD  object  display , but you can call it anything you\u2019d like. You can even create more than one, if you have more displays connected to your MCU.  The last step to the Paperino setup should occur in the setup() function. Stick a  display.begin()  function in there, which will initialise the display and update all sorts of behind-the-scenes settings for you.  setup() {\n    display.begin();        //Configure Paperino and all of it\u2019s pins\n}", 
            "title": "Using the Adafruit GFX Library"
        }, 
        {
            "location": "/hookupEPD/#first-example-hello-world", 
            "text": "Now we are ready to let the display blink! You can use the  print()  command to write your first text on the screen buffer:  display.print(\u201cHello World!\u201d);      //Writes the text \u201cHello World!\u201d into the image buffer\ndisplay.updateFull();               //Refreshing display with the content of the image buffer  The command  updateFull()  actually triggers the ePaper refresh, displaying the content of the image buffer. That\u2019s it! To summarize everything, you can now see the complete code here:  //PAPERINO: Hello World example for the Paperino Micro ePaper breakoutboard\n\n#include \"Adafruit_mfGFX.h\"\n#include \"PLD_tinyEPD.h\"\n#include \"fonts.h\"\n\n#define EPD_RST     A0\n#define EPD_BUSY    A1\n#define EPD_CS      D5\n\nPL_tinyEPD display(EPD_CS, EPD_RST, EPD_BUSY);\n\nvoid setup() {\n    SPI1.begin();\n    SPI1.setBitOrder(MSBFIRST);                 \n    SPI1.setDataMode(SPI_MODE0); \n    SPI1.setClockDivider(SPI_CLOCK_DIV4);\n    display.begin(true);\n    display.print(\u201cHello World!\u201d);\n    display.updateFull();\n}\n\nvoid loop() {\n    }  That was easy, right? If you want to proceed with the setup of the integrated accelerometer let continue here.\nIf you are interested in more powerful design options of the Adafruit class let\u2019s have a look here.", 
            "title": "First Example: Hello World!"
        }, 
        {
            "location": "/hookupACC/", 
            "text": "The Accelerometer hookup guide\n\n\nIn this tutorial we\u2019ll give you a brief introduction to the Paperino Accelerometer, then we\u2019ll jump into some example code. The tutorial is split into the following sections:\n\n\nAccerelometer BMA250E\n \u2013 To begin, we\u2019ll have a look at the used accelerometer. \n\n\nHardware Hookup\n \u2013 In this section we\u2019ll show you how to hook an Arduino up to the accelerometer via SPI.\n\n\nUsing the Accelerometer\n \u2013 A quick examination of the family of accelerometer function calls.\n\n\nBeside the ePaper breakout board, you\u2019ll need something to control the display. Optimally you\u2019ll want something that has a 3.3V operating voltage. We\u2019ll be using a Particle Photon as an example, which generates and exposes 3V3 on one of the pins.\n\n\nUsing the Accelerometer\n\n\nBefore you get started, here\u2019s a quick overview of the \nBO_BMA250\n library and its initialisation procedure. You will see it is doable!\n\n\nAt the top of your code, where you include your required libraries, you should add the library \nBO_BMA250\n which does the setup and communication to the accelerometer. \n\n\n#include \u201cBO_BMA250\u201d\n\n\n\nAfter you have included the library, you can create an object \naccel\n in the global variable area of your code. Now its also time to define the pin mapping:\n\n\n#define ACC_CS      D0      //Chip select pin, used to select the acceleration sensor\n\nBO_BMA250       accel(ACC_CS);\n\n\n\nIn the example above we\u2019ve called our \nBO_BMA250\n object \naccel\n (accelerometer), but you can call it anything you\u2019d like. \n\n\nThe last step should occur in the setup() function. Stick an \naccel.begin()\n function in there, which will initialise the accelerometer for you.\n\n\nsetup()\n{\n    accel.begin();      //Configure Accelerometer BOSCH BMA250E \n}\n\n\n\nHello World!\n\n\nNow we are ready to let test the thing! You can use the \nprint()\n command to write your first text on the screen buffer:\n\n\ndisplay.print(\u201cHello World!\u201d);      //Writes the text \u201cHello World!\u201d into the image buffer\ndisplay.updateFull();               //Refreshing display with the content of the image buffer\n\n\n\nThe command \nupdateFull()\n actually triggers the ePaper refresh, displaying the content of the image buffer. That\u2019s it! To summarize everything, you can now see the complete code here:\n\n\n//PAPERINO: Hello World example\n\n#include \"Adafruit_mfGFX.h\"\n#include \"PLD_tinyEPD.h\"\n#include \"fonts.h\"\n\n#define EPD_RST     A0\n#define EPD_BUSY    A1\n#define EPD_CS      D5\n#define ACC_CS      D0\n\nPLD_tinyEPD display(EPD_CS, ACC_CS, EPD_RST, EPD_BUSY);\n\nvoid setup() {\n    SPI1.begin();\n    SPI1.setBitOrder(MSBFIRST);                 \n    SPI1.setDataMode(SPI_MODE0); \n    SPI1.setClockDivider(SPI_CLOCK_DIV4);\n    display.begin(true);\n    display.print(\u201cHello World!\u201d);\n    display.updateFull();\n}\n\nvoid loop() {\n    }", 
            "title": "Accelerometer"
        }, 
        {
            "location": "/hookupACC/#the-accelerometer-hookup-guide", 
            "text": "In this tutorial we\u2019ll give you a brief introduction to the Paperino Accelerometer, then we\u2019ll jump into some example code. The tutorial is split into the following sections:  Accerelometer BMA250E  \u2013 To begin, we\u2019ll have a look at the used accelerometer.   Hardware Hookup  \u2013 In this section we\u2019ll show you how to hook an Arduino up to the accelerometer via SPI.  Using the Accelerometer  \u2013 A quick examination of the family of accelerometer function calls.  Beside the ePaper breakout board, you\u2019ll need something to control the display. Optimally you\u2019ll want something that has a 3.3V operating voltage. We\u2019ll be using a Particle Photon as an example, which generates and exposes 3V3 on one of the pins.", 
            "title": "The Accelerometer hookup guide"
        }, 
        {
            "location": "/hookupACC/#using-the-accelerometer", 
            "text": "Before you get started, here\u2019s a quick overview of the  BO_BMA250  library and its initialisation procedure. You will see it is doable!  At the top of your code, where you include your required libraries, you should add the library  BO_BMA250  which does the setup and communication to the accelerometer.   #include \u201cBO_BMA250\u201d  After you have included the library, you can create an object  accel  in the global variable area of your code. Now its also time to define the pin mapping:  #define ACC_CS      D0      //Chip select pin, used to select the acceleration sensor\n\nBO_BMA250       accel(ACC_CS);  In the example above we\u2019ve called our  BO_BMA250  object  accel  (accelerometer), but you can call it anything you\u2019d like.   The last step should occur in the setup() function. Stick an  accel.begin()  function in there, which will initialise the accelerometer for you.  setup()\n{\n    accel.begin();      //Configure Accelerometer BOSCH BMA250E \n}", 
            "title": "Using the Accelerometer"
        }, 
        {
            "location": "/hookupACC/#hello-world", 
            "text": "Now we are ready to let test the thing! You can use the  print()  command to write your first text on the screen buffer:  display.print(\u201cHello World!\u201d);      //Writes the text \u201cHello World!\u201d into the image buffer\ndisplay.updateFull();               //Refreshing display with the content of the image buffer  The command  updateFull()  actually triggers the ePaper refresh, displaying the content of the image buffer. That\u2019s it! To summarize everything, you can now see the complete code here:  //PAPERINO: Hello World example\n\n#include \"Adafruit_mfGFX.h\"\n#include \"PLD_tinyEPD.h\"\n#include \"fonts.h\"\n\n#define EPD_RST     A0\n#define EPD_BUSY    A1\n#define EPD_CS      D5\n#define ACC_CS      D0\n\nPLD_tinyEPD display(EPD_CS, ACC_CS, EPD_RST, EPD_BUSY);\n\nvoid setup() {\n    SPI1.begin();\n    SPI1.setBitOrder(MSBFIRST);                 \n    SPI1.setDataMode(SPI_MODE0); \n    SPI1.setClockDivider(SPI_CLOCK_DIV4);\n    display.begin(true);\n    display.print(\u201cHello World!\u201d);\n    display.updateFull();\n}\n\nvoid loop() {\n    }", 
            "title": "Hello World!"
        }, 
        {
            "location": "/refEPD/", 
            "text": "Micro EPD (ePaper display 1.1\u201d)\n\n\nEPaper displays (EPDs) mimic the appearance of natural paper. They can hold text and images indefinitely, even without electricity. They are thus perfect for ultra-low power applications which do not require too high update frequency.\n\n\nPaperino uses an EPD from Plastic Logic. This is an Eink-based active-matrix display based on the Ultrachip UC8156 EPD controller. The display supports 148 x 70 pixels.\n\n\nSpecification\n\n\n\n\n\n\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n\n\nResolution\n\n\n148 x 70 px\n\n\n\n\n\n\n\n\nActive area\n\n\n25.16 x 11.9 mm\n\n\n\n\n\n\n\n\nPixel density\n\n\n150 ppi\n\n\n\n\n\n\n\n\nGrey levels\n\n\n4\n\n\n\n\n\n\n\n\nWeight\n\n\n1.2g\n\n\n\n\n\n\n\n\nThickness\n\n\n460 \u00b5m\n\n\n\n\n\n\n\n\nOperating conditions\n\n\n0C to 40C\n\n\n\n\n\n\n\n\nStorage conditions\n\n\n-25C to 50C\n\n\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\nPlastic Logic (EPD Manufacturer)\n\n\nMicro EPD datasheet", 
            "title": "Micro EPD"
        }, 
        {
            "location": "/refEPD/#micro-epd-epaper-display-11", 
            "text": "EPaper displays (EPDs) mimic the appearance of natural paper. They can hold text and images indefinitely, even without electricity. They are thus perfect for ultra-low power applications which do not require too high update frequency.  Paperino uses an EPD from Plastic Logic. This is an Eink-based active-matrix display based on the Ultrachip UC8156 EPD controller. The display supports 148 x 70 pixels.", 
            "title": "Micro EPD (ePaper display 1.1\u201d)"
        }, 
        {
            "location": "/refEPD/#specification", 
            "text": "Type  Value       Resolution  148 x 70 px     Active area  25.16 x 11.9 mm     Pixel density  150 ppi     Grey levels  4     Weight  1.2g     Thickness  460 \u00b5m     Operating conditions  0C to 40C     Storage conditions  -25C to 50C", 
            "title": "Specification"
        }, 
        {
            "location": "/refEPD/#links", 
            "text": "Plastic Logic (EPD Manufacturer)  Micro EPD datasheet", 
            "title": "Links"
        }, 
        {
            "location": "/refACCEL/", 
            "text": "Accelerometer (Bosch BMA250E)\n\n\nThe BMA250E is an advanced, ultra-small, triaxial, low-g acceleration sensor with digital interfaces, aiming for low-power consumer electronics applications. Featuring 10 bit digital resolution, the BMA250E allows low-noise measurement of accelerations in 3 perpendicular axes.\nOn top, the BMA250E with its 2 x 2 mm\u00b2 footprint integrates a multitude of features that facilitate its use especially in the area of motion detection applications, such as device orientation detection, gaming, HMI and menu browser control. Featuring a full operation current consumption of only 130 \u00b5A the BMA250E is ideally suited for mobile consumer electronic devices.\n\n\nSpecification\n\n\n\n\n\n\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n\n\nDigital resolution\n\n\n10 bit\n\n\n\n\n\n\n\n\nMeasurement ranges\n\n\n\u00b12 g, \u00b14 g, \u00b18 g, \u00b116 g\n\n\n\n\n\n\n\n\nDigital inputs/outputs\n\n\nSPI \n I\u00b2C, 2x digital interrupt pins\n\n\n\n\n\n\n\n\nCurrent consumption, full\n\n\n130 \u03bcA (@ 2 kHz data rate)\n\n\n\n\n\n\n\n\nCurrent consumption, low-power\n\n\n6.5 \u03bcA (@ 40 Hz data rate)\n\n\n\n\n\n\n\n\nInterrupts\n\n\nData-ready (e. g. for processor synchronization), Any-motion (slope) detection (e. g. for wake-up), Tap sensing (e. g. for tap-sensitive UI control), Orientation change recognition (e. g. for portrait/landscape switching), Flat detection (e. g. for position sensitive switching), Low-g / high-g detection (e. g. for shock and free-fall detection), No-motion (e.g. for power saving)\n\n\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\nBosch BMA250E datasheet", 
            "title": "Accelerometer"
        }, 
        {
            "location": "/refACCEL/#accelerometer-bosch-bma250e", 
            "text": "The BMA250E is an advanced, ultra-small, triaxial, low-g acceleration sensor with digital interfaces, aiming for low-power consumer electronics applications. Featuring 10 bit digital resolution, the BMA250E allows low-noise measurement of accelerations in 3 perpendicular axes.\nOn top, the BMA250E with its 2 x 2 mm\u00b2 footprint integrates a multitude of features that facilitate its use especially in the area of motion detection applications, such as device orientation detection, gaming, HMI and menu browser control. Featuring a full operation current consumption of only 130 \u00b5A the BMA250E is ideally suited for mobile consumer electronic devices.", 
            "title": "Accelerometer (Bosch BMA250E)"
        }, 
        {
            "location": "/refACCEL/#specification", 
            "text": "Type  Value       Digital resolution  10 bit     Measurement ranges  \u00b12 g, \u00b14 g, \u00b18 g, \u00b116 g     Digital inputs/outputs  SPI   I\u00b2C, 2x digital interrupt pins     Current consumption, full  130 \u03bcA (@ 2 kHz data rate)     Current consumption, low-power  6.5 \u03bcA (@ 40 Hz data rate)     Interrupts  Data-ready (e. g. for processor synchronization), Any-motion (slope) detection (e. g. for wake-up), Tap sensing (e. g. for tap-sensitive UI control), Orientation change recognition (e. g. for portrait/landscape switching), Flat detection (e. g. for position sensitive switching), Low-g / high-g detection (e. g. for shock and free-fall detection), No-motion (e.g. for power saving)", 
            "title": "Specification"
        }, 
        {
            "location": "/refACCEL/#links", 
            "text": "Bosch BMA250E datasheet", 
            "title": "Links"
        }, 
        {
            "location": "/exampleHelloWorld/", 
            "text": "Example: Hello World!\n\n\nIn this initial tutorial we show you how to initialize the ePaper display and write \u201cHello World!\u201d on the screen. It is the shortest possible demo, you will see it\u2019s really simple:-)\n\n\nCode\n\n\n//PAPERINO: Hello World example for the Paperino Micro ePaper breakoutboard\n\n#include \"Adafruit_mfGFX.h\"\n#include \"PL_microEPD.h\"\n#include \"fonts.h\"\n\n#define EPD_CS      D5                  //SPI CS of the ePaper screen\n#define EPD_RST     A0                  //Reset pin\n#define EPD_BUSY    A1                  //Busy pin\n\nPL_microEPD display(EPD_CS, EPD_RST, EPD_BUSY);\n\nvoid setup() {\n    SPI1.begin();\n    SPI1.setBitOrder(MSBFIRST);                 \n    SPI1.setDataMode(SPI_MODE0); \n    SPI1.setClockDivider(SPI_CLOCK_DIV4);\n    display.begin(true);                //Initialize the ePaper and reset the screen\n    display.print(\u201cHello World!\u201d);      //Write \u201cHello World!\u201d into the buffer\n    display.updateFull();               //Trigger an update based on the buffer content\n}\n\nvoid loop() {\n    }\n\n\n\nNow let\u2019s have a look at the code: Before you can talk to your display, the function \ndisplay.begin(true)\n needs to be called once in the \nsetup()\n loop.  This initialises your ePaper screen and resets the display to a solid white background. To write text, the function \ndisplay.print()\n can be used. To actually trigger an update, call \ndisplay.updateFull()\n. This updates the screen with the content of the previously filled image buffer.\n\n\n(video of this example)\n\n\nInterested in printing more complicated things on the screen? Then let\u2019s proceed with the next example (\nGFX demo\n), which shows you how to draw text in different fonts and sizes and how to draw graphic elements like lines, circles \n rectangles.", 
            "title": "Hello World!"
        }, 
        {
            "location": "/exampleHelloWorld/#example-hello-world", 
            "text": "In this initial tutorial we show you how to initialize the ePaper display and write \u201cHello World!\u201d on the screen. It is the shortest possible demo, you will see it\u2019s really simple:-)", 
            "title": "Example: Hello World!"
        }, 
        {
            "location": "/exampleHelloWorld/#code", 
            "text": "//PAPERINO: Hello World example for the Paperino Micro ePaper breakoutboard\n\n#include \"Adafruit_mfGFX.h\"\n#include \"PL_microEPD.h\"\n#include \"fonts.h\"\n\n#define EPD_CS      D5                  //SPI CS of the ePaper screen\n#define EPD_RST     A0                  //Reset pin\n#define EPD_BUSY    A1                  //Busy pin\n\nPL_microEPD display(EPD_CS, EPD_RST, EPD_BUSY);\n\nvoid setup() {\n    SPI1.begin();\n    SPI1.setBitOrder(MSBFIRST);                 \n    SPI1.setDataMode(SPI_MODE0); \n    SPI1.setClockDivider(SPI_CLOCK_DIV4);\n    display.begin(true);                //Initialize the ePaper and reset the screen\n    display.print(\u201cHello World!\u201d);      //Write \u201cHello World!\u201d into the buffer\n    display.updateFull();               //Trigger an update based on the buffer content\n}\n\nvoid loop() {\n    }  Now let\u2019s have a look at the code: Before you can talk to your display, the function  display.begin(true)  needs to be called once in the  setup()  loop.  This initialises your ePaper screen and resets the display to a solid white background. To write text, the function  display.print()  can be used. To actually trigger an update, call  display.updateFull() . This updates the screen with the content of the previously filled image buffer.  (video of this example)  Interested in printing more complicated things on the screen? Then let\u2019s proceed with the next example ( GFX demo ), which shows you how to draw text in different fonts and sizes and how to draw graphic elements like lines, circles   rectangles.", 
            "title": "Code"
        }, 
        {
            "location": "/exampleGFXdemo/", 
            "text": "Example: GFX demo!\n\n\nIn the previous example, we learned how to initialise the ePaper screen and write \u201cHello World!\u201d. Let\u2019s try now some more complicated features! In the next section of this tutorial we will learn how to change the size and the position of the text and how to change the text font. In the second section we will see how easy it is to draw some graphic elements on the display. The last section contains the code for a demo, showing an example on how to use these elements.\n\n\nCharacters and Text\n\n\nvoid setCursor(uint16_t x0, uint16_t y0);\nvoid setTextColor(uint16_t color);\nvoid setTextColor(uint16_t color, uint16_t backgroundcolor);\nvoid setTextSize(uint8_t size);\nvoid setFont(uint8_t f); \nvoid setTextWrap(boolean w);\n\n\n\nGraphics\n\n\nvoid drawPixel(uint16_t x, uint16_t y, uint16_t color);\nvoid drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);  \nvoid drawRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t color);\nvoid fillRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t color);\nvoid drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\nvoid fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\nvoid drawRoundRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t radius, uint16_t color);\nvoid fillRoundRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t radius, uint16_t color);\nvoid drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\nvoid fillTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\n\n\n\nCode\n\n\n//PAPERINO: Hello World example for the Paperino Micro ePaper breakoutboard\n\n#include \"Adafruit_mfGFX.h\"\n#include \"PL_microEPD.h\"\n#include \"fonts.h\"\n\n#define EPD_CS      D5                  //SPI CS of the ePaper screen\n#define EPD_RST     A0                  //Reset pin\n#define EPD_BUSY    A1                  //Busy pin\n\nPL_microEPD display(EPD_CS, EPD_RST, EPD_BUSY);\n\nvoid setup() {\n    SPI1.begin();\n    SPI1.setBitOrder(MSBFIRST);                 \n    SPI1.setDataMode(SPI_MODE0); \n    SPI1.setClockDivider(SPI_CLOCK_DIV4);\n    display.begin(true);                //Initialize the ePaper and reset the screen\n    display.print(\u201cHello World!\u201d);      //Write \u201cHello World!\u201d into the buffer\n    display.updateFull();               //Trigger an update based on the buffer content\n}\n\nvoid loop() {\n    }\n\n\n\nNow let\u2019s have a look at the code: Before you can talk to your display, the function \ndisplay.begin(true)\n needs to be called once in the \nsetup()\n loop.  This initialises your ePaper screen and resets the display to a solid white background. To write text, the function \ndisplay.print()\n can be used. To actually trigger an update, call \ndisplay.updateFull()\n. This updates the screen with the content of the previously filled image buffer.\n\n\n(video of this example)\n\n\nInterested in printing more complicated things on the screen? Then let\u2019s proceed with the next example (\nGFX demo\n), which shows you how to draw text in different fonts and sizes and how to draw graphic elements like lines, circles \n rectangles.", 
            "title": "GFX demo"
        }, 
        {
            "location": "/exampleGFXdemo/#example-gfx-demo", 
            "text": "In the previous example, we learned how to initialise the ePaper screen and write \u201cHello World!\u201d. Let\u2019s try now some more complicated features! In the next section of this tutorial we will learn how to change the size and the position of the text and how to change the text font. In the second section we will see how easy it is to draw some graphic elements on the display. The last section contains the code for a demo, showing an example on how to use these elements.", 
            "title": "Example: GFX demo!"
        }, 
        {
            "location": "/exampleGFXdemo/#characters-and-text", 
            "text": "void setCursor(uint16_t x0, uint16_t y0);\nvoid setTextColor(uint16_t color);\nvoid setTextColor(uint16_t color, uint16_t backgroundcolor);\nvoid setTextSize(uint8_t size);\nvoid setFont(uint8_t f); \nvoid setTextWrap(boolean w);", 
            "title": "Characters and Text"
        }, 
        {
            "location": "/exampleGFXdemo/#graphics", 
            "text": "void drawPixel(uint16_t x, uint16_t y, uint16_t color);\nvoid drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);  \nvoid drawRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t color);\nvoid fillRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t color);\nvoid drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\nvoid fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);\nvoid drawRoundRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t radius, uint16_t color);\nvoid fillRoundRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t radius, uint16_t color);\nvoid drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);\nvoid fillTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);", 
            "title": "Graphics"
        }, 
        {
            "location": "/exampleGFXdemo/#code", 
            "text": "//PAPERINO: Hello World example for the Paperino Micro ePaper breakoutboard\n\n#include \"Adafruit_mfGFX.h\"\n#include \"PL_microEPD.h\"\n#include \"fonts.h\"\n\n#define EPD_CS      D5                  //SPI CS of the ePaper screen\n#define EPD_RST     A0                  //Reset pin\n#define EPD_BUSY    A1                  //Busy pin\n\nPL_microEPD display(EPD_CS, EPD_RST, EPD_BUSY);\n\nvoid setup() {\n    SPI1.begin();\n    SPI1.setBitOrder(MSBFIRST);                 \n    SPI1.setDataMode(SPI_MODE0); \n    SPI1.setClockDivider(SPI_CLOCK_DIV4);\n    display.begin(true);                //Initialize the ePaper and reset the screen\n    display.print(\u201cHello World!\u201d);      //Write \u201cHello World!\u201d into the buffer\n    display.updateFull();               //Trigger an update based on the buffer content\n}\n\nvoid loop() {\n    }  Now let\u2019s have a look at the code: Before you can talk to your display, the function  display.begin(true)  needs to be called once in the  setup()  loop.  This initialises your ePaper screen and resets the display to a solid white background. To write text, the function  display.print()  can be used. To actually trigger an update, call  display.updateFull() . This updates the screen with the content of the previously filled image buffer.  (video of this example)  Interested in printing more complicated things on the screen? Then let\u2019s proceed with the next example ( GFX demo ), which shows you how to draw text in different fonts and sizes and how to draw graphic elements like lines, circles   rectangles.", 
            "title": "Code"
        }, 
        {
            "location": "/exampleComingSoon/", 
            "text": "Example: xyz\n\n\nComing soon\u2026", 
            "title": "Counter demo (tap-based)"
        }, 
        {
            "location": "/exampleComingSoon/#example-xyz", 
            "text": "Coming soon\u2026", 
            "title": "Example: xyz"
        }, 
        {
            "location": "/exampleComingSoon/", 
            "text": "Example: xyz\n\n\nComing soon\u2026", 
            "title": "Stop watch (tap-based)"
        }, 
        {
            "location": "/exampleComingSoon/#example-xyz", 
            "text": "Coming soon\u2026", 
            "title": "Example: xyz"
        }, 
        {
            "location": "/exampleComingSoon/", 
            "text": "Example: xyz\n\n\nComing soon\u2026", 
            "title": "Portrait/landscape detection"
        }, 
        {
            "location": "/exampleComingSoon/#example-xyz", 
            "text": "Coming soon\u2026", 
            "title": "Example: xyz"
        }, 
        {
            "location": "/exampleComingSoon/", 
            "text": "Example: xyz\n\n\nComing soon\u2026", 
            "title": "WakeOnTap demo"
        }, 
        {
            "location": "/exampleComingSoon/#example-xyz", 
            "text": "Coming soon\u2026", 
            "title": "Example: xyz"
        }, 
        {
            "location": "/exampleComingSoon/", 
            "text": "Example: xyz\n\n\nComing soon\u2026", 
            "title": "Thermometer"
        }, 
        {
            "location": "/exampleComingSoon/#example-xyz", 
            "text": "Coming soon\u2026", 
            "title": "Example: xyz"
        }
    ]
}